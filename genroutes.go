// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
	"time"

	"github.com/slashquery/slashquery"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by genroutes.go at:
// {{ .Timestamp }}
// using data from
// {{ .Config }}
// DO NOT EDIT!
package slashquery

// AddRoutes create router routes
func (sq *Slashquery) AddRoutes(router *violetear.Router) {
	{{- range .Routes }}
	{{ printf "%s" . }}
	{{- end }}
}
`))

func main() {
	var (
		f     = flag.String("f", "slashquery.yaml", "Configuration `slashquery.yaml`")
		paths []string
	)

	flag.Parse()

	if _, err := os.Stat(*f); os.IsNotExist(err) {
		fmt.Printf("Cannot read configuration file: %s, use -h for more info.\n", *f)
		os.Exit(1)
	}

	sq, err := slashquery.New(*f)
	if err != nil {
		log.Fatalln(err)
	}

	routes, err := os.Create("routes.go")
	if err != nil {
		log.Fatalln(err)
	}
	defer routes.Close()

	//path, proxyHandler, methods
	for name, route := range sq.Routes {
		methods := strings.Join(route.Methods, ",")
		var b bytes.Buffer
		if len(route.Plugins) > 0 {
			plugins := strings.Join(route.Plugins, ",")
			b.WriteString(fmt.Sprintf(`router.Handle("%s/*", middleware.New(%s).Then(sq.Proxy(%q))`,
				name,
				plugins,
				name))
		} else {
			b.WriteString(fmt.Sprintf(`router.Handle("%s/*", sq.Proxy(%q)`, name, name))
		}
		if methods == "" {
			b.WriteString(")")
		} else {
			b.WriteString(fmt.Sprintf(", %q)", methods))
		}
		paths = append(paths, b.String())
	}

	packageTemplate.Execute(routes, struct {
		Timestamp time.Time
		Config    string
		Routes    []string
	}{
		Timestamp: time.Now(),
		Config:    *f,
		Routes:    paths,
	})
}
