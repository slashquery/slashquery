// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/slashquery/slashquery"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by genroutes.go at:
// {{ .Timestamp }}
// using data from
// {{ .Config }}
// DO NOT EDIT!
package slashquery

import (
	"github.com/nbari/violetear"
	"github.com/nbari/violetear/middleware"
	{{- range $k, $i := .Imports }}
	{{ printf "%q" $i }}
	{{- end }}
)

// AddRoutes create router routes
func (sq *Slashquery) AddRoutes(router *violetear.Router) {
	{{- range .Routes }}
	{{ printf "%s" . }}
	{{- end }}
}
`))

func main() {
	var (
		f       = flag.String("f", "slashquery.yaml", "Configuration `slashquery.yaml`")
		paths   []string
		imports map[string]string = make(map[string]string)
	)

	flag.Parse()

	if _, err := os.Stat(*f); os.IsNotExist(err) {
		fmt.Printf("Cannot read configuration file: %s, use -h for more info.\n", *f)
		os.Exit(1)
	}

	sq, err := slashquery.New(*f)
	if err != nil {
		log.Fatalln(err)
	}

	routes, err := os.Create("routes.go")
	if err != nil {
		log.Fatalln(err)
	}
	defer routes.Close()

	//path, proxyHandler, methods
	for name, route := range sq.Routes {
		var (
			path, fragment string
			b              bytes.Buffer
			methods        = strings.Join(route.Methods, ",")
		)
		u := strings.Split(name, "#")
		if u[0] == "~" {
			u[0] = ""
		}
		path = u[0]
		if len(u) > 1 {
			fragment = fmt.Sprintf("#%s", u[1])
		}
		if len(route.Plugins) > 0 {
			var plugins []string
			for _, plugin := range route.Plugins {
				p, ok := sq.Plugins[plugin]
				if !ok {
					fmt.Printf("\nPlugin: %q not found, check the plugins section\n\n", plugin)
					os.Exit(1)
				}
				imports[p[0]] = p[0]
				plugins = append(plugins, p[1])
			}
			b.WriteString(
				fmt.Sprintf(`router.Handle("%s/*%s", middleware.New(%s).Then(sq.Proxy(%q))`,
					path,
					fragment,
					strings.Join(plugins, ", "),
					name),
			)
		} else {
			b.WriteString(
				fmt.Sprintf(`router.Handle("%s/*%s", sq.Proxy(%q)`,
					path,
					fragment,
					name),
			)
		}
		if methods == "" {
			b.WriteString(")")
		} else {
			b.WriteString(fmt.Sprintf(", %q)", methods))
		}
		paths = append(paths, b.String())
	}

	sort.Strings(paths)

	packageTemplate.Execute(routes, struct {
		Timestamp time.Time
		Config    string
		Imports   map[string]string
		Routes    []string
	}{
		Timestamp: time.Now(),
		Config:    *f,
		Imports:   imports,
		Routes:    paths,
	})
}
